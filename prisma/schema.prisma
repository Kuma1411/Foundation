// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



enum Status{
  ACTIVE
  INACTIVE
}


//////////////////////////////////// User schema ////////////////////////////////////////

model User{
  userId          String  @id @default(uuid())
  firstName       String?
  middleName      String?
  lastName        String?
  username        String
  email           String
  status          Status
  password        String
  roleId          String?
  gender          String?
  phoneNumber     String?
  mobileNumber    String?
  dateOfBirth     String?
  location        String?
  interest        String?
  bio             String?
  createdAt       DateTime @default(now())
  role           Role? @relation(fields: [roleId], references: [roleId])
}


model Role{
  roleId          String @id @default(uuid())
  role            String
  status          Status
  description     String?
  users           User[]
  createdAt       DateTime @default(now())
}



//////////////////////////////////// Item schema ////////////////////////////////////////

model Item{
  itemId          String @id @default(uuid())
  ID              String
  name            String
  itemGroup       String
  status          Status
  barcode         Barcode[]
  accounting      Accounting[]
  supplier        Supplier[]
  tax             Tax[]
  customerDetails CustomerDetails[]
  createdAt       DateTime @default(now())
}


model Barcode{
  barcodeId       String @id @default(uuid())
  barcode         String
  barcodeType     String  
  uom             String
  itemId          String
  item            Item @relation(fields: [itemId], references: [itemId])
  createdAt       DateTime @default(now())
}


model Accounting{
  accountingId                String @id @default(uuid())
  itemId                      String
  item                        Item @relation(fields: [itemId], references: [itemId])
  company                     String
  defaultWarehouse            String
  defaultPriceList            String
  createdAt                   DateTime @default(now())
}


model Supplier{
  supplierId          String @id @default(uuid())
  itemId              String
  item                Item @relation(fields: [itemId], references: [itemId])
  supplier            String
  supplierPartNumber  String
}

model CustomerDetails{
  customerDetailsId   String @id @default(uuid())
  itemId              String
  item                Item @relation(fields: [itemId], references: [itemId])
  customerName        String
  customeerGroup      String
  RefCode            String
}



model Tax{
  taxId             String @id @default(uuid())
  itemId            String
  item              Item @relation(fields: [itemId], references: [itemId])
  itemTaxTemplate   String
  taxCategory       String
  validFrom         String
  minimumNetRate    String
  maximumNetRate    String
  createdAt         DateTime @default(now())
}


/////////////////////////////////// Account Schema //////////////////////////////////////

model Account{
  accountId       String @id @default(uuid())
  accountName     String
  accountNumber   String
  accountType     String
  status          Status
}


